# Proje 1

## [22,27,16,2,18,6] -> Insertion Sort

### Insertion Sort Aşamaları:

1. İlk eleman 22 olduğu için zaten sıralı: `[22, 27, 16, 2, 18, 6]`
2. 27'yi yerleştiriyoruz: `[22, 27, 16, 2, 18, 6]` (değişiklik yok, 27 zaten yerinde)
3. 16'yı yerleştiriyoruz: `[16, 22, 27, 2, 18, 6]` (16, 22 ve 27'nin önüne geçiyor)
4. 2'yi yerleştiriyoruz: `[2, 16, 22, 27, 18, 6]` (2, tüm elemanların önüne geçiyor)
5. 18'i yerleştiriyoruz: `[2, 16, 18, 22, 27, 6]` (18, 22 ve 27'nin önüne geçiyor)
6. 6'yı yerleştiriyoruz: `[2, 6, 16, 18, 22, 27]` (6, 16'nın önüne geçiyor)

Sonunda sıralı dizi: `[2, 6, 16, 18, 22, 27]`

### Big-O Gösterimi:

Insertion Sort'un en kötü durumdaki (worst case) zaman karmaşıklığı **O(n^2)**'dir. Bunun nedeni, her bir eleman için tüm önceki elemanlarla karşılaştırma yapılması gerekliliğidir.

### Time Complexity: 18 Sayısının Case'i:

18 sayısı, sıralı dizide ortadadır (`[2, 6, 16, 18, 22, 27]`). Bu nedenle:
- **Average case:** Aradığımız sayının ortada olması.

---

## [7,3,5,8,2,9,4,15,6] dizisinin Selection Sort'a göre ilk 4 adımı:

### Selection Sort Aşamaları:

1. İlk adım:
   - En küçük eleman bulunur ve ilk elemanla yer değiştirilir: `[2, 3, 5, 8, 7, 9, 4, 15, 6]`

2. İkinci adım:
   - İkinci en küçük eleman bulunur ve ikinci elemanla yer değiştirilir: `[2, 3, 5, 8, 7, 9, 4, 15, 6]` (zaten sıralı)

3. Üçüncü adım:
   - Üçüncü en küçük eleman bulunur ve üçüncü elemanla yer değiştirilir: `[2, 3, 4, 8, 7, 9, 5, 15, 6]`

4. Dördüncü adım:
   - Dördüncü en küçük eleman bulunur ve dördüncü elemanla yer değiştirilir: `[2, 3, 4, 5, 7, 9, 8, 15, 6]`

İlk 4 adımın sonunda dizi: `[2, 3, 4, 5, 7, 9, 8, 15, 6]`

